import { useState } from 'react';

export default function ArticlesCreatePage() {
  const [title, setTitle] = useState('');
  const [body, setBody] = useState('');
  const [isCompleted, setIsCompleted] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setIsCompleted(true);
  };

  return (
    <div className="max-w-xl mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold mb-6">記事作成</h2>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <input
            value={title}
            onChange={e => setTitle(e.target.value)}
            placeholder="タイトル"
            className="w-full px-4 py-2 border rounded"
          />
        </div>
        <div>
          <textarea
            value={body}
            onChange={e => setBody(e.target.value)}
            placeholder="本文"
            className="w-full px-4 py-2 border rounded"
          />
        </div>
        <div className="flex justify-end gap-2">
          <button type="submit" className="bg-blue-600 text-white px-6 py-2 rounded">
            作成
          </button>
          <button
            type="button"
            onClick={() => {
              setTitle('');
              setBody('');
            }}
            className="bg-gray-200 text-gray-700 px-6 py-2 rounded"
          >
            リセット
          </button>
        </div>
      </form>
      {isCompleted && (
        <div className="flex justify-center mt-8">
          <span className="bg-green-600 text-white px-8 py-3 rounded">作成完了</span>
        </div>
      )}
    </div>
  );
}


import { useRouter } from 'next/router';

export default function ArticleDetailPage() {
  const router = useRouter();
  const { id } = router.query;

  return (
    <div className="max-w-2xl mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold mb-4">記事詳細</h2>
      <div>記事ID: {id}</div>
      {/* 記事内容は省略 */}
    </div>
  );
}


import Link from 'next/link';

export default function ArticlesIndexPage() {
  return (
    <div className="max-w-2xl mx-auto px-4 py-8">
      <div className="flex justify-end mb-8">
        <Link href="/articles/create">
          <button className="bg-blue-600 text-white px-5 py-2 rounded">＋ 新規作成</button>
        </Link>
      </div>
      <h2 className="text-2xl font-bold text-gray-800">記事一覧</h2>
      {/* 記事リストは省略 */}
    </div>
  );
}


import { useAuthState } from 'react-firebase-hooks/auth';
import { auth } from '../../src/firebase';
import { useUserRole } from '../../src/hooks/useUserRole';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { getFirestore, collection, addDoc, updateDoc, doc, getDoc, serverTimestamp } from 'firebase/firestore';
import { app } from '../../src/firebase';
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import Image from 'next/image';

type ArticleDoc = {
  title: string;
  body: string;
  createdAt?: ReturnType<typeof serverTimestamp>;
  updatedAt?: ReturnType<typeof serverTimestamp>;
  authorId?: string;
  tags?: string[];
  isDraft?: boolean;
  imageUrl?: string;
};

export default function ArticlesCreatePage() {
  const [user, loading] = useAuthState(auth);
  const role = useUserRole(user ?? null);
  const isAdmin = role === 'admin';
  const router = useRouter();
  const { id } = router.query;

  const [title, setTitle] = useState('');
  const [body, setBody] = useState('');
  const [isDraft, setIsDraft] = useState(false);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imageUrl, setImageUrl] = useState<string | undefined>(undefined);
  const [isCompleted, setIsCompleted] = useState(false);

  const handleCancelImage = () => {
    setImageFile(null);
    setImageUrl(undefined);
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setImageFile(e.target.files[0]);
      setImageUrl(URL.createObjectURL(e.target.files[0]));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      console.log('保存処理開始');
      const db = getFirestore(app);
      let uploadedImageUrl = imageUrl;
      if (imageFile) {
        console.log('画像アップロード開始');
        const storage = getStorage(app);
        const storageRef = ref(storage, `articles/${Date.now()}_${imageFile.name}`);
        await uploadBytes(storageRef, imageFile);
        uploadedImageUrl = await getDownloadURL(storageRef);
        console.log('画像アップロード完了');
      }

      if (id) {
        console.log('記事更新開始');
        const updateData: Partial<ArticleDoc> = {
          title,
          body,
          updatedAt: serverTimestamp(),
          isDraft,
        };
        if (uploadedImageUrl !== undefined) {
          updateData.imageUrl = uploadedImageUrl;
        }
        await updateDoc(doc(db, 'articles', id as string), updateData);
        console.log('記事更新完了');
      } else {
        console.log('記事新規作成開始');
        const newDoc: ArticleDoc = {
          title,
          body,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp(),
          authorId: user?.uid,
          tags: [],
          isDraft,
        };
        if (uploadedImageUrl !== undefined) {
          newDoc.imageUrl = uploadedImageUrl;
        }
        await addDoc(collection(db, 'articles'), newDoc);
        console.log('記事新規作成完了');
      }
      setIsCompleted(true);
      console.log('isCompleted set to true');
    } catch (err) {
      console.error('保存時にエラー:', err);
      alert('保存時にエラーが発生しました: ' + (err instanceof Error ? err.message : String(err)));
    }
  };

  useEffect(() => {
    if (id) {
      const db = getFirestore(app);
      getDoc(doc(db, 'articles', id as string)).then(snap => {
        if (snap.exists()) {
          const data = snap.data();
          setTitle(data.title || '');
          setBody(data.body || '');
          setIsDraft(data.isDraft || false);
          setImageUrl(data.imageUrl || undefined);
        }
      });
    }
  }, [id]);

 if (loading || role === null) return <div>Loading...</div>;
if (!isAdmin) return <div className="text-center text-red-500 py-10">権限がありません</div>;

  return (
    <div className="max-w-xl mx-auto px-4 py-8 bg-white rounded-lg shadow-md mt-6 mb-10">
      <div>デバッグ: id={String(id)}</div>
      <h2 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-6 text-center">
        {id ? '記事編集' : '記事作成'}（管理者専用）
      </h2>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">タイトル</label>
          <input
            value={title}
            onChange={e => setTitle(e.target.value)}
            placeholder="タイトル"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">本文</label>
          <textarea
            value={body}
            onChange={e => setBody(e.target.value)}
            placeholder="本文"
            required
            rows={8}
            className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 transition resize-y"
          />
        </div>
        <div className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={isDraft}
            onChange={e => setIsDraft(e.target.checked)}
            id="isDraft"
            className="accent-blue-600"
          />
          <label htmlFor="isDraft" className="text-sm text-gray-700 select-none">
            下書きとして保存
          </label>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">画像アップロード</label>
          <input type="file" accept="image/*" onChange={handleImageChange} className="block" />
          {imageUrl && (
            <div className="mt-3 flex flex-col items-center gap-2">
              <Image
                src={imageUrl}
                alt="記事画像"
                width={320}
                height={180}
                className="rounded object-cover border"
                style={{ maxWidth: 320, height: "auto" }}
              />
              <button
                type="button"
                onClick={handleCancelImage}
                className="mt-1 px-3 py-1 text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 rounded transition"
                disabled={isCompleted}
              >
                画像をキャンセル
              </button>
            </div>
          )}
        </div>
        <div className="flex justify-end gap-2">
          <span style={{ background: 'yellow', color: 'black' }}>ここにボタン</span>
          <button
            type="submit"
            className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-6 py-2 rounded shadow transition-colors duration-150"
            disabled={isCompleted}
          >
            {id ? '更新' : '作成'}
          </button>
          <button
            type="button"
            onClick={() => {
              setTitle('');
              setBody('');
              setIsDraft(false);
              setImageFile(null);
              setImageUrl(undefined);
            }}
            className="bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold px-6 py-2 rounded shadow transition-colors duration-150"
            disabled={isCompleted}
          >
            リセット
          </button>
        </div>
      </form>
      {isCompleted && (
        <div className="flex justify-center mt-8">
          <button
            type="button"
            className="bg-green-600 hover:bg-green-700 text-white font-semibold px-8 py-3 rounded shadow transition-colors duration-150"
            onClick={() => router.push('/articles')}
          >
            作成完了
          </button>
        </div>
      )}
    </div>
  );
}



import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { getFirestore, doc, getDoc } from 'firebase/firestore';
import { app, auth } from '../../src/firebase';
import Image from 'next/image';
import { useAuthState } from 'react-firebase-hooks/auth';
import { useUserRole } from '../../src/hooks/useUserRole';
import Link from 'next/link';

type Article = {
  id: string;
  title: string;
  body: string;
  createdAt?: { toDate?: () => Date } | string;
  authorId?: string;
  tags?: string[];
  isDraft?: boolean;
  imageUrl?: string;
};

export default function ArticleDetailPage() {
  const router = useRouter();
  const { id } = router.query;
  const [article, setArticle] = useState<Article | null>(null);
  const [user] = useAuthState(auth);
  const role = useUserRole(user ?? null);
  const isAdmin = role === 'admin';

  useEffect(() => {
    if (!id || typeof id !== 'string') return;
    const db = getFirestore(app);
    getDoc(doc(db, 'articles', id)).then(snap => {
      if (snap.exists()) {
        setArticle({ id: snap.id, ...(snap.data() as Omit<Article, 'id'>) });
      }
    });
  }, [id]);

  // 下書き記事はadminのみ表示
  if (!article) return <div className="text-center py-10 text-gray-500">Loading...</div>;
  if (article.isDraft && !isAdmin) return <div className="text-center py-10 text-red-500">このページは表示できません</div>;

  return (
    <div className="max-w-2xl mx-auto px-4 py-8 bg-white rounded-lg shadow-md mt-6 mb-10">
      <h2 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-4 flex items-center">
        {article.title}
        {isAdmin && article.isDraft && (
          <span className="ml-3 text-xs text-orange-500 border border-orange-400 rounded px-2 py-0.5 bg-orange-50 font-semibold">
            下書き
          </span>
        )}
      </h2>
      {article.imageUrl && (
        <div className="w-full flex justify-center mb-6">
          <Image
            src={article.imageUrl}
            alt="記事画像"
            width={400}
            height={240}
            className="rounded-lg object-cover max-h-60 w-full sm:w-[400px]"
            style={{ maxWidth: 400, height: "auto" }}
          />
        </div>
      )}
      <div className="text-gray-800 text-base leading-relaxed whitespace-pre-line mb-4 break-words">
        {article.body}
      </div>
      {article.tags && article.tags.length > 0 && (
        <div className="mb-2 flex flex-wrap gap-2">
          {article.tags.map(tag => (
            <span key={tag} className="inline-block bg-blue-100 text-blue-700 text-xs px-2 py-0.5 rounded">
              #{tag}
            </span>
          ))}
        </div>
      )}
      {article.createdAt && (
        <div className="text-xs text-gray-400 mb-4">
          投稿日: {typeof article.createdAt === 'object' && article.createdAt.toDate
            ? article.createdAt.toDate().toLocaleString()
            : String(article.createdAt)}
        </div>
      )}
      {isAdmin && (
        <div className="flex justify-end">
          <Link href={`/articles/create?id=${article.id}`}>
            <button className="bg-gray-200 hover:bg-gray-300 text-gray-700 rounded px-4 py-2 text-sm font-semibold transition-colors duration-150">
              編集
            </button>
          </Link>
        </div>
      )}
    </div>
  );
}


import { useEffect, useState } from 'react';
import { getFirestore, collection, getDocs, query, orderBy } from 'firebase/firestore';
import { app, auth } from '../../src/firebase';
import Link from 'next/link';
import { useAuthState } from 'react-firebase-hooks/auth';
import { useUserRole } from '../../src/hooks/useUserRole';
import Image from 'next/image';

type Article = {
  id: string;
  title: string;
  body: string;
  createdAt?: { toDate?: () => Date } | string;
  isDraft?: boolean;
  imageUrl?: string;
  tags?: string[];
};

export default function ArticlesIndexPage() {
  const [articles, setArticles] = useState<Article[]>([]);
  const [user] = useAuthState(auth);
  const role = useUserRole(user ?? null);
  const isAdmin = role === 'admin';

  useEffect(() => {
    const fetchArticles = async () => {
      const db = getFirestore(app);
      const q = query(collection(db, 'articles'), orderBy('createdAt', 'desc'));
      const snap = await getDocs(q);
      setArticles(
        snap.docs.map(doc => ({
          id: doc.id,
          ...(doc.data() as Omit<Article, 'id'>)
        }))
      );
    };
    fetchArticles();
  }, []);

  // 下書き記事はadminのみ表示
  const visibleArticles = isAdmin
    ? articles
    : articles.filter(article => !article.isDraft);

  return (
    <div className="max-w-2xl mx-auto px-4 py-8">
      {isAdmin && (
        <div className="flex justify-end mb-8">
          <Link href="/articles/create">
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2 rounded shadow transition-colors duration-150"
            >
              ＋ 新規作成
            </button>
          </Link>
        </div>
      )}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8 gap-4">
        <h2 className="text-2xl font-bold text-gray-800">記事一覧</h2>
      </div>
      <ul className="space-y-8">
        {visibleArticles.map(article => (
          <li
            key={article.id}
            className="bg-white rounded-lg shadow hover:shadow-lg transition-shadow duration-150 p-5 flex flex-col sm:flex-row gap-6"
          >
            {article.imageUrl && (
              <div className="flex-shrink-0">
                <Image
                  src={article.imageUrl}
                  alt="記事画像"
                  width={120}
                  height={80}
                  className="rounded object-cover"
                  style={{ maxWidth: 120, height: "auto" }}
                />
              </div>
            )}
            <div className="flex-1 flex flex-col gap-2">
              <Link href={`/articles/${article.id}`}>
                <div className="border border-blue-200 bg-white/80 backdrop-blur-sm rounded px-0 py-2 mb-2 shadow-sm w-full">
                  <h3 className="text-lg font-semibold text-blue-700 hover:underline flex items-center px-3">
                    {article.title}
                    {isAdmin && article.isDraft && (
                      <span className="ml-2 text-xs text-orange-500 border border-orange-400 rounded px-2 py-0.5 bg-orange-50">
                        下書き
                      </span>
                    )}
                  </h3>
                </div>
              </Link>
              <div className="border border-gray-200 bg-white/60 backdrop-blur-sm rounded px-0 py-2 mb-2 shadow-sm text-gray-700 line-clamp-2 w-full">
                <div className="px-3">
                  {article.body.slice(0, 80)}...
                </div>
              </div>
              {article.tags && article.tags.length > 0 && (
                <div className="text-xs text-gray-500 mb-1">
                  タグ: {article.tags.join(', ')}
                </div>
              )}
              {article.createdAt && (
                <div className="text-xs text-gray-400 mb-1">
                  投稿日: {typeof article.createdAt === 'object' && article.createdAt.toDate
                    ? article.createdAt.toDate().toLocaleString()
                    : String(article.createdAt)}
                </div>
              )}
              {isAdmin && (
                <div className="mt-1">
                  <Link href={`/articles/create?id=${article.id}`}>
                    <button className="text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 rounded px-3 py-1 transition-colors duration-150">
                      編集
                    </button>
                  </Link>
                </div>
              )}
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}